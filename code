#基于Bottle框架的Python web应用容器化
#一、准备工作
#确保系统中已经安装了Docker Compose和 Python 3 以及 Docker Python 3 用于运行 Bottle 应用程序，Docker 用于容器化部署，方便应用的分发和运行。
#安装Docker Compose 
curl -L https://github.com/docker/compose/releases/download/1.26.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

#安装 python3 ，然后可以使用包管理器来安装 pip3
sudo yum install python3-pip


#二、安装 Bottle 框架
#在终端中以 root 权限执行以下命令安装 Bottle 框架：
pip3 install bottle 

#系统会提示使用 root 权限安装不是一个好的做法，建议使用pip3 install --user，不过这里我们先忽略提示继续安装。系统会自动从 Python 官方仓库下载 Bottle 框架并安装，安装成功后会显示Successfully installed bottle - 0.13.3 。
#三、创建 cho13目录并进入cho3目录创建Dockerfile
mkdir cho13 && cd cho13
vi Dockerfile


#使用文本编辑器（如vi）创建一个名为Dockerfile的文件，内容如下：
# 使用官方 Python 运行时作为基础镜像
FROM python:3.9-slim

# 设置工作目录
WORKDIR /app

# 复制当前目录的所有内容到工作目录
COPY .  /app

# 安装应用程序所需的依赖
RUN pip install --no-cache-dir bottle

# 暴露应用程序运行的端口
EXPOSE 8080

# 定义容器启动时运行的命令
CMD ["python", "app.py"]
#四、编写应用程序代码（app.py）
#创建一个名为app.py的文件
vi app.py

#内容如下：
from bottle import Bottle, run

app = Bottle()

@app.route('/')
def index():
    return "<html><body><h1>Hello from Python Bottle App in Container!</h1></body></html>"

if __name__ == '__main__':
    run(app, host='0.0.0.0', port=8080)
#五、构建 Docker 镜像
#在包含Dockerfile和app.py的目录下，在终端执行以下命令构建 Docker 镜像：
docker build -t python-bottle-app.
#六、运行 Docker 容器
#执行以下命令运行 Docker 容器：
docker run -p 8080:8080 python-bottle-app
#七、访问应用程序
#打开浏览器，输入http://0.0.0.0:8080/ （如果是在本地运行，也可以输入http://localhost:8080/ ），就可以看到页面显示Hello from Python Bottle App in Container! ，表示 Bottle 应用在容器中成功运行。

